#!/usr/bin/env python3

"""
Move i3 focus around visible workspaces.

NOTE: This assumes that only one workspace is visible per monitor/output.
"""

import argparse
import json
import os
import subprocess

# TODO: Could use xrandr to automatically find this out
# Monitors as reported by xrandr - sorted from left to right as they appear on
# my desk.
MONITORS = (
    "HDMI-0",
    "DVI-D-0",
)

def main():
    args = get_args()
    focus_workspace(args.direction, wrap=args.wrap, move=args.move)


def focus_workspace(direction, *, wrap=False, move=False):
    """Focus on a new visible workspace.

    Positional args:
        direction: where to focus to

    Keyword args:
        wrap: boolean to indicate if we should wrap workspaces if at an edge
        move: boolean to indicate if the container should move to the workspace
    """
    # Get current workspace and monitor information
    workspaces = get_visible_workspaces()
    current_workspace = [ws for ws in workspaces if ws["focused"] == True][0]
    current_monitor = current_workspace["output"]

    # Compute current and new monitor index
    current_monitor_index = MONITORS.index(current_monitor)
    direction_offset = 1 if direction == "right" else -1
    new_monitor_index = current_monitor_index + direction_offset

    # Ensure we're within bounds
    if wrap:
        new_monitor_index = new_monitor_index % len(MONITORS)
    elif new_monitor_index < 0:
        new_monitor_index = 0
    elif new_monitor_index >= len(MONITORS):
        new_monitor_index = len(MONITORS) - 1

    new_monitor_name = MONITORS[new_monitor_index]
    new_workspace_name = [ws["name"] for ws in workspaces if ws["output"] == new_monitor_name][0]

    #
    # Now that we've found the workspace we want to focus on, let's dooo it!
    #
    cmd = []
    if move:  # Move the focused window instead of just switching focus
        cmd = ["i3-msg", "move", "workspace", new_workspace_name]
    else:
        cmd = ["i3-msg", "workspace", new_workspace_name]
    with open(os.devnull, "w") as DEVNULL:
        subprocess.call(cmd, stdout=DEVNULL, stderr=DEVNULL)


def get_focused_workspace(workspaces):
    """Return the name of the focused workspace."""
    pass


def get_workspaces():
    """Return a list of dictionaries of the existing workspaces.
    Example:
        [
            {
                "focused": false,
                "name": "2",
                "num": 2,
                "output": "DP-0",
                "rect": {
                    "height": 1901,
                    "width": 1080,
                    "x": 0,
                    "y": 0
                },
                "urgent": false,
                "visible": true
            },
            {
                "focused": false,
                "name": "1",
                "num": 1,
                "output": "DVI-I-1",
                "rect": {
                    "height": 1581,
                    "width": 2560,
                    "x": 1080,
                    "y": 0
                },
                "urgent": false,
                "visible": false
            },
            {
                "focused": true,
                "name": "3",
                "num": 3,
                "output": "DVI-I-1",
                "rect": {
                    "height": 1581,
                    "width": 2560,
                    "x": 1080,
                    "y": 0
                },
                "urgent": false,
                "visible": true
            }
        ]
    """
    cmd = ["i3-msg", "-t", "get_workspaces"]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()  # Get bytes back
    out = out.decode("utf-8")
    err = err.decode("utf-8")

    workspaces = json.loads(out)
    return workspaces


def get_visible_workspaces():
    """Return a json list of visible workspaces."""
    workspaces = get_workspaces()
    return [ws for ws in workspaces if ws['visible'] == True]


def get_args():
    """Return an argparse command line argument object."""
    parser = argparse.ArgumentParser(
        "Move i3 focus to a new visible workspace"
    )

    parser.add_argument(
        "direction",
        help="Switch focus to the workspace to the <direction> of current one",
        choices=["left", "right"],
    )

    help_text = (
        "Wrap output to the furthest left or right monitor if already focused "
        "on the furthest right or left monitor, respectively."
    )
    parser.add_argument(
        "--wrap",
        help=help_text,
        action="store_true",
    )

    parser.add_argument(
        "--move",
        help="Move focused window to the next workspace.",
        action="store_true",
    )

    args = parser.parse_args()
    return args


if __name__ == "__main__":
    main()
